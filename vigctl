#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2019-2022 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import errno
import os
import pathlib
import re
import selectors
import signal
import sys
import time

0_0  # Python >= 3.6 is required

def parse_time(s):
    item_re = '[0-9]+[smhd]'
    if not re.fullmatch(f'({item_re})+', s):
        raise ValueError
    dt = 0
    for item in re.findall(item_re, s):
        n = int(item[:-1])
        unit = item[-1]
        dt += n * dict(
            d = 24 * 60 * 60,
            h =      60 * 60,
            m =           60,
            s =            1,
        )[unit]
    return dt
parse_time.__name__ = 'time'

def get_time():
    return time.clock_gettime(time.CLOCK_MONOTONIC)

def xdivmod(n, *ds):
    for d in ds:
        n, r = divmod(n, d)
        yield r
    yield n

def fmt_time(t):
    t = round(t)
    [s, m, h, d] = xdivmod(t, 60, 60, 24)
    r = ''
    if d:
        r += f'{d}d'
    if h:
        r += f'{h}h'
    if m:
        r += f'{m}m'
    if s or (t == 0):
        r += f'{s}s'
    return r

def wait(timeout, kwd='ETA', callback=object):
    stdin_fd = sys.stdin.fileno()
    slc = selectors.DefaultSelector()
    slc.register(sys.stdin, selectors.EVENT_READ)
    time_start = get_time()
    time_end = time_start + timeout
    while True:
        time_rem = time_end - get_time()
        if time_rem <= 0:
            break
        eta = fmt_time(time_rem)
        print(f'\r\033[2K{kwd}: {eta}', end='', file=sys.stderr, flush=True)
        sleep = time_rem % 1
        if sleep == 0:
            sleep = 1
        if slc.select(timeout=sleep):
            os.read(stdin_fd, 1024)
            return True
        callback()

def execvp(*cmdline):
    os.execvp(cmdline[0], cmdline)

class Led():

    def __init__(self, sys_path):
        self._path = sys_path
        with open(self._path / 'max_brightness', 'rb') as fp:
            self._max_brightness = fp.read()

    def set(self, value=1):
        bvalue = self._max_brightness if value else b'0'
        with open(self._path / 'brightness', 'wb') as fp:
            fp.write(bvalue)

    def reset(self):
        self.set(0)

class Leds():

    def __init__(self, dev_path):
        dev_path = dev_path.resolve()
        try:
            rel_path = dev_path.relative_to('/dev/input')
        except ValueError:
            raise OSError(errno.ENOTTY, 'not an input device', str(dev_path))
        self._path = '/sys/class/input/' / rel_path / 'device'

    def __getattr__(self, attr):
        [path, *_junk] = self._path.glob(f'*:{attr}')
        return Led(path)

def main():
    ap = argparse.ArgumentParser()
    default_timeout = '3h'
    ap.add_argument('-t', dest='timeout', metavar='TIME', default='3h', type=parse_time,
        help=f'time until the alarm goes off (default: {default_timeout})'
    )
    default_duration = '1h'
    ap.add_argument('-d', dest='duration', metavar='TIME', default='1h', type=parse_time,
        help=f'alarm duration (default: {default_duration})'
    )
    default_kbd_dev = '/dev/input/by-path/platform-i8042-serio-0-event-kbd'
    ap.add_argument('-K', dest='kbd', metavar='PATH', default=default_kbd_dev, type=pathlib.Path,
        help=f'keyboard device (default: {default_kbd_dev})'
    )
    default_led = 'scrolllock'
    ap.add_argument('-L', dest='led', metavar='LED', choices=('capslock', 'numlock', 'scrolllock'), default=default_led,
        help=f'keyboard LED for alerting (default: {default_led})'
    )
    opts = ap.parse_args()
    if os.getuid() != 0:
        execvp('sudo', '-E', '-u', 'root', sys.executable, *sys.argv)
    ledkit = Leds(opts.kbd)
    led = getattr(ledkit, opts.led)
    del opts.kbd
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    while True:
        if wait(opts.timeout):
            continue
        led.set()
        try:
            if wait(opts.duration, kwd='ALERT', callback=led.set):
                continue
        finally:
            led.reset()
        break
    print(file=sys.stderr)
    execvp('poweroff')

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
